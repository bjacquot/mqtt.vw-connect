'use strict';
var CONFIGFILE  = require('/etc/vwConnect.json');

class Log {
    /**
     * @param {string} namespaceLog Logging namespace to prefix
     * @param {string} level The log level
     * @param {object} logger logger instance
     */
    constructor(namespaceLog, level, logger) {
        this.namespaceLog = namespaceLog;
        this.level = level;
        // We have to bind the this context here or it is possible that `this` is
        // undefined when passing around the logger methods. This happens e.g. when doing this:
        //   const log = new Log(...);
        //   const test = log.info;
        //   test();
        this.logger = logger;
        this.silly = this.silly.bind(this);
        this.debug = this.debug.bind(this);
        this.info  = this.info.bind(this);
        this.error = this.error.bind(this);
        this.warn  = this.warn.bind(this);
    }
    silly(msg) {
        this.logger.silly(this.namespaceLog + ' ' + msg);
    }
    debug(msg) {
//        this.logger.debug(this.namespaceLog + ' ' + msg);
    }
    info(msg) {
        this.logger.info(this.namespaceLog + ' ' + msg);
    }
    error(msg) {
        this.logger.error(this.namespaceLog + ' ' + msg);
    }
    warn(msg) {
        this.logger.warn(this.namespaceLog + ' ' + msg);
    }
}

class Config {
    constructor()
    {
        var Type = CONFIGFILE.type;
        var User = CONFIGFILE.user;
        var Password = CONFIGFILE.password;
        var Pin = CONFIGFILE.pin;
        var TripType = CONFIGFILE.tripType;
        var Interval = CONFIGFILE.interval;
        
        this.type = Type;
        this.user = User;
        this.password=Password;
        this.pin = Pin;
        this.forceinterval= 9999;
        this.interval= Interval;
        this.tripType = TripType;
        
        
    }
}

class Adapter
{
	constructor()
	{
		this.log = new Log("skoda connect : ", 0, console);
		this.log.debug("Log start");
        
        
        this.config = new Config();
        
        this.log.info(this.config.type);
        this.log.info(this.config.user);
        this.log.info(this.config.tripType);

	}

	on()
	{
	}
	
	setState(p1,p2,p3)
    {
        if('mqttProcess' in this){
            this.mqttProcess.process(p1,p2);
        }
    }
    
    setObjectNotExists()
    {
    }
    
    subscribeStates()
    {
        console.log("subs");
        
    }
}

module.exports = Adapter;
